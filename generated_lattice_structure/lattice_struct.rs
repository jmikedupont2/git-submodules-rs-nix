# [derive (Debug , Clone)] pub struct Lattice { pub name : String , pub layers : Vec < Box < dyn LatticeLayerTrait >> , } pub trait LatticeLayerTrait : std :: fmt :: Debug { fn describe_layer (& self) ; } impl < T : HasValueCount + std :: fmt :: Debug + 'static > LatticeLayerTrait for LatticeLayer < T > { fn describe_layer (& self) { self . describe () ; } } impl Lattice { pub fn new (name : & str) -> Self { Self { name : name . to_string () , layers : Vec :: new () } } pub fn add_layer < T : HasValueCount + std :: fmt :: Debug + 'static > (& mut self , layer : LatticeLayer < T >) { self . layers . push (Box :: new (layer)) ; } pub fn describe (& self) { println ! ("\n### Lattice Model: {} ###" , self . name) ; for layer in & self . layers { layer . describe_layer () ; } } }