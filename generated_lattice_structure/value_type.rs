# [derive (Debug , PartialEq , Eq , Clone , Copy)] pub enum ValueType { Bit , ThreeValue , FiveValue , PrimeValue7 (u8) , PrimeValue11 (u8) , PrimeValue13 (u8) , PrimeValue17 (u8) , PrimeValue19 (u8) , } impl ValueType { pub fn count (& self) -> u8 { match self { ValueType :: Bit , ValueType :: ThreeValue , ValueType :: FiveValue , ValueType :: PrimeValue7 (p) , ValueType :: PrimeValue11 (p) , ValueType :: PrimeValue13 (p) , ValueType :: PrimeValue17 (p) , ValueType :: PrimeValue19 (p) , } } pub fn zos_sequence () -> Vec < ValueType > { vec ! [ValueType :: Bit , ValueType :: ThreeValue , ValueType :: FiveValue , ValueType :: PrimeValue7 , ValueType :: PrimeValue11 , ValueType :: PrimeValue13 , ValueType :: PrimeValue17 , ValueType :: PrimeValue19 ,] } }